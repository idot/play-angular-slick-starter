package test

import org.specs2.mutable._
import play.api.db.slick.DB
import play.api.db.slick.Config.driver.simple._
import play.api.test._
import play.api.test.Helpers._
import domain._
import org.joda.time.DateTime
import org.specs2.matcher.ThrownMessages
import scala.collection.mutable.ArrayBuffer
import scala.slick.jdbc.StaticQuery


class DBSpec extends Specification with ThrownMessages {
  
  
  "DB" should {
    "take DDL from liquibase generated file and execute all tasks" in new WithApplication(FakeApplication(additionalConfiguration = 
		inMemoryDatabase(options=Map("DATABASE_TO_UPPER" -> "false", "DB_CLOSE_DELAY" -> "-1")) ++ 
		Map("application.insertdata" -> "false")
	  
	  )) {
      
	  def createDB()(implicit s: Session){
		  try{
			 val source = scala.io.Source.fromFile("scripts/liquibase/h2.ddl.sql")
 		     val ddl = source.getLines.mkString("\n")
			 StaticQuery.updateNA(ddl).execute
			 source.close()
		  } catch {
		    case e: Exception => failure(e.toString)
		  } 
	  } 
	   
      import Db._
 
      def insertUsers()(implicit s: Session){
		  Tables.users.list.size === 0
          val user = insertUser(DomainHelper.user("user1","user1","user1","email@email.com", "pw", true))
		  Tables.users.list.size === 1
		  user.toOption.get.id === Some(1)
      }

      DB.withSession { implicit s: Session => 
          createDB()
		  insertUsers()
      }
    }
    
    
    
    
    "select the correct testing db settings by default" in new WithApplication(FakeApplication(additionalConfiguration = inMemoryDatabase())) {
      DB.withSession { implicit s: Session =>
        s.conn.getMetaData.getURL must startWith("jdbc:h2:mem:play-test")
      }
    }
    

//    "use the default db settings when no other possible options are available" in new WithApplication {
//      DB.withSession { implicit s: Session =>
//        import BetterDb._
//     //     ddl()
//        //the generated ddl has to be converted to psql with
//        //perl -p -i -e 's/BIGINT GENERATED BY DEFAULT AS IDENTITY\(START WITH 1\) NOT NULL/BIGSERIAL/'
//        s.conn.getMetaData.getURL must equalTo("jdbc:postgresql:better")
//      }
//    }
  }

}
